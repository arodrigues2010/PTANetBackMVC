using Microsoft.AspNetCore.Mvc;
using EsettMvcIntegration.Models;
using EsettMvcIntegration.Services;

namespace EsettMvcIntegration.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Produces("application/json")]
    public class FeesController : ControllerBase
    {
        private readonly FeeDataRepository _repository;
        private readonly FeeDataService _service;

        public FeesController(FeeDataRepository repository, FeeDataService service)
        {
            _repository = repository;
            _service = service;
        }

        [HttpGet]
        [ProducesResponseType(typeof(List<FeeDataModel>), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(DialengaErrorDTO), StatusCodes.Status500InternalServerError)]
        public async Task<ActionResult<List<FeeDataModel>>> GetAll()
        {
            var result = await _repository.GetAllFeesAsync();
            if (result.IsSuccess)
            {
                return Ok(result.Value);
            }
            return StatusCode(StatusCodes.Status500InternalServerError, new DialengaErrorDTO { Message = result.ErrorMessage });
        }

        [HttpGet("{id}")]
        [ProducesResponseType(typeof(FeeDataModel), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(DialengaErrorDTO), StatusCodes.Status404NotFound)]
        [ProducesResponseType(typeof(DialengaErrorDTO), StatusCodes.Status500InternalServerError)]
        public async Task<ActionResult<FeeDataModel>> GetById(int id)
        {
            var result = await _repository.GetFeeByIdAsync(id);
            if (result.IsSuccess)
            {
                if (result.Value == null)
                {
                    return NotFound(new DialengaErrorDTO { Message = "Fee not found." });
                }
                return Ok(result.Value);
            }
            return StatusCode(StatusCodes.Status500InternalServerError, new DialengaErrorDTO { Message = result.ErrorMessage });
        }

        [HttpPost("fetch")]
        [ProducesResponseType(typeof(void), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(DialengaErrorDTO), StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> FetchAndStoreFees()
        {
            try
            {
                var fees = await _service.GetFeesAsync();
                foreach (var fee in fees)
                {
                    var result = await _repository.AddFeeAsync(fee);
                    if (!result.IsSuccess)
                    {
                        // Log the error (not shown here) and return a failure response.
                        return StatusCode(StatusCodes.Status500InternalServerError, new DialengaErrorDTO { Message = result.ErrorMessage });
                    }
                }
                return Ok();
            }
            catch (Exception ex)
            {
                // Log the exception (not shown here) and return a failure response.
                return StatusCode(StatusCodes.Status500InternalServerError, new DialengaErrorDTO { Message = "An error occurred while processing your request." });
            }
        }
    }
}

